// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String           @id @default(cuid())
  username        String?
  firstName       String?
  accounts        Account[]
  lastName        String?
  email           String           @unique
  emailVerified   Boolean?
  password        String? // Optional if using OAuth
  avatarUrl       String? // For profile picture
  bio             String? // Optional profile bio
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  journalEntries  JournalEntry[]
  transformations Transformation[]
  comments        Comment[]
  likes           Like[]
  Session         Session[]
}

model Transformation {
  id          String    @id @default(cuid())
  title       String
  description String?
  artworkUrl  String // URL of uploaded artwork
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
}

model JournalEntry {
  id        String   @id @default(cuid())
  private   Boolean  @default(true)
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tags      Tag[] // Tags like "Reflection", "Transformation"
}

model Comment {
  id               String          @id @default(cuid())
  content          String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  transformationId String?
  transformation   Transformation? @relation(fields: [transformationId], references: [id])
}

model Like {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  transformationId String?
  transformation   Transformation? @relation(fields: [transformationId], references: [id])
}

model Tag {
  id      String         @id @default(cuid())
  name    String         @unique
  entries JournalEntry[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
